/* 3 types of css: inline, internal, external;

  selectors: 
    - universal(*) n :root, element (no symbol), id(#), class(.); 
    - To edit various properties we separate the elements using (,);
    - To edit particular type of elements from a class (tag.class);
    - To edit a specific quality of element (tag:quality);

  cascading effect:
    - importance (using '!important'{10,000}) after the parameter: 
        eg. color: x !important;
    - specificity order:
        (inline{1000} > id{100} > class/attrib/pseudo-class{10} > element/pseudo-ele{1} > universal{0})
    - position/order of occurance (for same specificity order/level) 
    - origin (Explicitely_set > extension specific > browser specific)
*/

/*Universal Selectors*/
* {
  box-sizing: border-box;
  overflow-x: none;
}

:root {
  --dark: #000000f2;
  --mid: #808080;
  --light: #ffffffd3;

  --bg: var(--light);
  --txt: var(--dark);
}

/*targetting elements*/
h1,
h2,
h3,
h4,
h5,
h6 {
  font: bold;
  text-decoration: underline;
  text-align: center;
  color: var(--txt);
  text-shadow: .5em 1em 1em var(--mid);
}

a {
  color: var(--txt);
  text-align: center;
  text-decoration: none;
  margin-left: 1em;
}

button {
  color: var(--txt);
  text-align: center;
  cursor: pointer;
  padding: .3em;
  background: var(--bg);
  border: 0.5em var(--bg);
  border-radius: 2em;
  justify-content: center;
  align-items: center;
  box-shadow: .5em .5em .8em var(--mid);
}

/*targetting ids*/
#bookmarks {
  display: flex;
  gap: 1.2em;
}

#navbar {
  margin: 0;
  width: auto;
}

#btn {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
}

#icon {
  cursor: pointer;
  text-align: center;
  position: fixed;
  bottom: 3rem;
  right: 2rem;
}

#mode {
  cursor: pointer;
  text-align: center;
  position: fixed;
  top: 7rem;
  right: 1rem;
}

#anim {
  height: 2.4rem;
  margin: .5rem;
  position: relative;

  /* animation can be done in two ways: 

  -> defining each property separately:
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-name: move; 

  -> or a single line*/
  animation: 5s linear infinite alternate move;
}

/*targetting class*/
.lt {
  background-image: linear-gradient(to left, #B1C7D2 30%, #7198AD 70%);
  display: flex;
  justify-content: space-between;
  font-size: .6rem;
  padding: 1em;
  align-items: space-evenly;
}

.image {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-evenly;
}

.pix {
  border: .25rem solid var(--txt);
  box-shadow: .5em 1em 1em var(--mid);
  transition: all 0.3s linear 0.1s;
  margin: 10px;
  height: 250px;
  width: auto;
}

/* targetting attributes */
[x=9] {
  /* would look for tag having 'x' attrib == 9 and would apply the styling
        eg. {in HTML}, we have: <div x=9> ... </div> 
  the styling would be applied, since the condition is satisfied i.e there is an attr 'x' whose value is 9. */
  background-color: var(--mid)
}

/* if for some reason we just mentioned 'x' then it would check the elements for mere existance of x
        eg. [x]{} would apply the styles to all the tags containing 'x' having any value
     */

/*targetting grps*/
p,
pre,
article {
  color: var(--txt);
  font-size: 1rem;
}

input,
textarea {
  font-size: 0.9rem;
  text-align: center;
  color: var(--bg);
  text-align: center;
  justify-content: center;
  padding: .5em;
  margin: .5em;
}

.text,
caption {
  color: var(--txt);
  padding-left: 2em;
}

/*targetting elements within a specific element */
a.lnk {
  /* all 'a' of class 'lnk'*/
  margin-left: 2em;
}

/* div>p{} (direct child) / div p{} (descendant) - target all 'p' within 'div' */
.lnk>a {
  /* all 'a' inside element having class 'lnk' (direct child)*/
  margin-left: 2em;
}

.lnk a {
  /* all 'a' inside element having class 'lnk' (indirect child or a descendant)*/
  margin-left: 2em;
}

/*targetting properties of a tag (Pseudo-Selectors)*/
button:hover,
.dark-mode button:hover {
  background-color: #B1C7D2;
  color: var(--txt);
}

a:hover,
.dark-mode a:hover {
  color: var(--mid);
}

img.pix:hover {
  transform: scale(1.07);
}


/*dark-mode settings*/
.dark-mode {
  --bg: var(--dark);
  --txt: var(--light);
}

.dark-mode .lt {
  background-image: linear-gradient(to left, #B1C7D2 30%, #456990 70%);
}

/* positioning properties :
using 'position' 
(absolute, relative, fixed, sticky, inherit..etc);

and for positioning the element looks at the {positioning} of the parent (or ancestor(in seq) if not found) element. or in special cases: t{ransfrom, filter, perspective} also act as a positioning for parent and further influencing the properties of the child

using 'z-index'

Higher z-index value would make an element appear more forward on the screen.

say. A have z-index:4 B have 6 and C doesn't have defined anything (so 0); then the positioning would be  BAC..on top of each other... so B would be positioned in front followed by A and C,

*/



/* Animation Queries*/
@keyframes move {
  from {
    top: 0;
    left: 0;
  }

  to {
    top: 0;
    left: 300px;
  }
}